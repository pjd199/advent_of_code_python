name: CI-CD-Pipeline

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - dev

  pull_request:
    types: [opened, edited, reopened]

concurrency: 
  group: CICD${{ github.ref }}
  cancel-in-progress: true

jobs:
  # check:
  #   name: Static Check
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Check out Respository
  #       uses: actions/checkout@v3
      
  #     - name: Setup up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.9"
  #         cache: "pip"
      
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements_CI_CD_check.txt

  #     - name: Lint with flake8
  #       run: |
  #         flake8 . --select=E9,F63,F7,F82 --show-source --statistics
  #         flake8 . --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  #     - name: Static type check with mypy
  #       run: |
  #         mypy --strict .

  #     - name: Security check with bandit
  #       run: |
  #         bandit -r advent_of_code

  # unit-test:
  #   name: Unit & Integration Test
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       group: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  #   steps:
  #     - name: Check out respository
  #       uses: actions/checkout@v3
      
  #     - name: Setup up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.9"
  #         cache: "pip"
      
  #     - name: Install dependancies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements_CI_CD_test.txt
      
  #     - name: Run pytest
  #       run: pytest ./tests/unit ./tests/integration --cov --splits 10 --group ${{ matrix.group }} -n auto --suppress-no-test-exit-code --splitting-algorithm=least_duration
      
  #     - name: Uploading coverage file artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: coverage${{ matrix.group }}
  #         path: .coverage

  # coverage:
  #   name: Coverage Check
  #   needs: unit-test 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out respository
  #       uses: actions/checkout@v3
      
  #     - name: Setup up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.9"
  #         cache: "pip"
     
  #     - name: Install dependancies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install coverage
      
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v2
      
  #     - name: Combine coverage files
  #       run: coverage combine coverage*/.coverage*

  #     - name: Generate XML report
  #       run: coverage xml --omit="*/test*"

  #     - name: Send coverage report to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
            
  #     - name: Check for 100% coverage
  #       run: coverage report --fail-under=100 --omit="*/test*"

  deploy-to-aws-lambda:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    steps:
      -  name: Check out respository
         uses: actions/checkout@v3

      - name: Set variables for Production
        if: github.ref == 'refs/heads/main'
        run: echo "SAM_CONFIG_FILE=samconfig.toml" >> $GITHUB_ENV
      
      - name: Set variables for Development
        if: github.ref == 'refs/heads/dev' || github.head_ref == 'dev'
        run: echo "SAM_CONFIG_FILE=samconfig_dev.toml" >> $GITHUB_ENV

      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      
      - name: Build the Container
        run: |
          docker build
          ls -l
          
        # aws ecr create-repository --repository-name python-lambda-runtime
        # aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 01234618058.dkr.ecr.eu-west-1.amazonaws.com
        # docker build -t python-lambda-runtime .
        # docker tag python-lambda-runtime:latest 012346180589.dkr.ecr.eu-west-2.amazonaws.com/python-lambda-runtime:latest
        # docker push 012346180589.dkr.ecr.eu-west-2.amazonaws.com/python-lambda-runtime:3.11





      # - name: Install project dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt

      # - name: SAM Validate
      #   run: sam validate --lint --debug



      # - name: SAM Build
      #   run: sam build --use-container --config-file ${{ env.SAM_CONFIG_FILE }} --debug
    
      # - name: SAM Deploy to AWS Lambda
      #   run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --config-file ${{ env.SAM_CONFIG_FILE }} --debug

      - name: Test Dev
        run: curl https://xfoq3sv7npeid5x6nzzlgdqqmy0uyesa.lambda-url.eu-west-2.on.aws

  # deploy-to-aws-lambda:
  #   name: Deploy to AWS Lambda 
  #   needs: [check, unit-test, coverage]
  #   runs-on: ubuntu-latest
  #   steps:
  #     -  name: Check out respository
  #        uses: actions/checkout@v3

  #     - name: Set variables for Production
  #       if: github.ref == 'refs/heads/main'
  #       run: echo "SAM_CONFIG_FILE=samconfig.toml" >> $GITHUB_ENV
      
  #     - name: Set variables for Development
  #       if: github.ref == 'refs/heads/dev' || github.head_ref == 'dev'
  #       run: echo "SAM_CONFIG_FILE=samconfig_dev.toml" >> $GITHUB_ENV

  #     - name: Setup up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.9"
  #         cache: "pip"

  #     - name: Setup AWS SAM
  #       uses: aws-actions/setup-sam@v1

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: Install project dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: SAM Validate
  #       run: sam validate

  #     - name: SAM Build
  #       run: sam build --config-file ${{ env.SAM_CONFIG_FILE }}
    
  #     - name: SAM Deploy to AWS Lambda
  #       run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --config-file ${{ env.SAM_CONFIG_FILE }}

  # system-test:
  #   name: System Testing
  #   needs: deploy-to-aws-lambda
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out respository
  #       uses: actions/checkout@v3
      
  #     - name: Setup up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.9"
  #         cache: "pip"

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: Install dependancies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements_CI_CD_test.txt
      
  #     - name: Run pytest on main lambda function
  #       if: github.ref == 'refs/heads/main'
  #       run: pytest ./tests/system -k _main -n auto

  #     - name: Run pytest on development lambda function
  #       if: github.ref == 'refs/heads/dev' || github.head_ref == 'dev'
  #       run: pytest ./tests/system -k _dev -n auto

  # update_status_graphic:
  #   name: Update Status Graphic
  #   needs: system-test
  #   uses: ./.github/workflows/update_status_graphic.yaml

  # dump:
  #   name: Dump Environment Variables
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Dump context
  #       uses: crazy-max/ghaction-dump-context@v1
