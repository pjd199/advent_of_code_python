name: CI-CD-Pipeline

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - dev

  pull_request:
    types: [opened, edited, reopened]

concurrency:
  group: CICD${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Static checks
    runs-on: ubuntu-latest

    steps:
      - name: Check out Respository
        uses: actions/checkout@v3

      - name: Setup up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: pip install pre-commit

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key:
            pre-commit-${{ env.pythonLocation }}-${{
            hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit on all files
        run: pre-commit run --all-files

  unit-test:
    name: Unit & Integration Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    steps:
      - name: Check out respository
        uses: actions/checkout@v3

      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependancies
        run: pip install -r requirements_CI_CD_test.txt

      - name: Run pytest
        run:
          pytest ./tests/unit ./tests/integration --cov --splits 10 --group ${{
          matrix.group }} -n auto --suppress-no-test-exit-code
          --splitting-algorithm=least_duration

      - name: Uploading coverage file artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

  coverage:
    name: Coverage Check
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out respository
        uses: actions/checkout@v3

      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependancies
        run: pip install coverage

      - name: Download coverage artifacts
        uses: actions/download-artifact@v3

      - name: Combine coverage files
        run: coverage combine coverage*/.coverage*

      - name: Generate XML report
        run: coverage xml --omit="*/test*"

      - name: Send coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Check for 100% coverage
        run: coverage report --fail-under=100 --omit="*/test*"

  build-and-deploy:
    name: Deploy to AWS Lambda
    needs: [unit-test, check]
    runs-on: ubuntu-latest
    steps:
      - name: Check out respository
        uses: actions/checkout@v3

      - name: Set variables for Production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "SAM_CONFIG_FILE=samconfig.toml" >> $GITHUB_ENV
          echo -e "ARG BUILD_PACKAGE=advent_of_code_solver@git+https://github.com/pjd199/advent_of_code_python@main\n$(cat Dockerfile)" > Dockerfile

      - name: Set variables for Development
        if: github.ref == 'refs/heads/dev' || github.head_ref == 'dev'
        run: |
          echo "SAM_CONFIG_FILE=samconfig_dev.toml" >> $GITHUB_ENV
          echo -e "ARG BUILD_PACKAGE=advent_of_code_solver@git+https://github.com/pjd199/advent_of_code_python@dev\n$(cat Dockerfile)" > Dockerfile

      - name: Setup AWS SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup AWS SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: SAM Validate
        run: sam validate --lint

      - name: SAM Build
        run: sam build --config-file ${{ env.SAM_CONFIG_FILE }}

      - name: SAM Deploy to AWS Lambda
        run:
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset
          --config-file ${{ env.SAM_CONFIG_FILE }}

  system-test:
    name: System Testing
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out respository
        uses: actions/checkout@v3

      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_CI_CD_test.txt

      - name: Run pytest on main lambda function
        if: github.ref == 'refs/heads/main'
        run: pytest ./tests/system -k _main -n auto

      - name: Run pytest on development lambda function
        if: github.ref == 'refs/heads/dev' || github.head_ref == 'dev'
        run: pytest ./tests/system -k _dev -n auto

  update_status_graphic:
    name: Update Status Graphic
    needs: unit-test
    uses: ./.github/workflows/update_status_graphic.yaml
