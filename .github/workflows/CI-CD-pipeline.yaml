name: CI-CD-Pipeline

on:
  push:
    branches:
      - main
      - dev

  pull_request:
    types: [opened, edited, reopened]

concurrency: 
  group: CICD${{ github.ref }}
  cancel-in-progress: true

jobs:
  debug:
    name: Debug Dump
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"

  check:
    name: Static Check
    runs-on: ubuntu-latest

    steps:
      - name: Check out Respository
        uses: actions/checkout@v3
      
      - name: Setup up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_CI_CD_check.txt

      - name: Lint with flake8
        run: |
          flake8 . --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Static type check with mypy
        run: |
          mypy --strict .

      - name: Security check with bandit
        run: |
          bandit -r advent_of_code

  unit-test:
    name: Unit & Integration Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: [1, 2, 3, 4, 5, 6]
    steps:
      - name: Check out respository
        uses: actions/checkout@v3
      
      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      
      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_CI_CD_test.txt
      
      - name: Run pytest
        run: pytest ./tests/unit ./tests/integration --cov --splits 6 --group ${{ matrix.group }} -n auto --suppress-no-test-exit-code --splitting-algorithm=least_duration
      
      - name: Uploading coverage file artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

  coverage:
    name: Coverage Check
    needs: unit-test 
    runs-on: ubuntu-latest
    steps:
      - name: Check out respository
        uses: actions/checkout@v3
      
      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
     
      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
      
      - name: Download all artifacts
        uses: actions/download-artifact@v2
      
      - name: Combine coverage files
        run: coverage combine coverage*/.coverage*

      - name: Generate XML report
        run: coverage xml --omit="*/test*"

      - name: Send coverage report to Codecov
        uses: codecov/codecov-action@v1
            
      - name: Check for 100% coverage
        run: coverage report --fail-under=100 --omit="*/test*"

  deploy-to-aws-lambda:
    name: Deploy to AWS Lambda 
    needs: [check, unit-test, coverage]
    runs-on: ubuntu-latest
    steps:
      -  name: Check out respository
         uses: actions/checkout@v3

      - name: Set variables for Production
        if: ${{ env.GITHUB_REF_NAME == 'main' }}
        run: echo "SAM_CONFIG_FILE=samconfig.toml" >> $GITHUB_ENV

      - name: Set variables for Development
        if: ${{ env.GITHUB_REF_NAME == 'dev' }}
        run: echo "SAM_CONFIG_FILE=samconfig_dev.toml" >> $GITHUB_ENV

      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Setup AWS SAM
        uses: aws-actions/setup-sam@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: SAM Validate
        run: sam validate

      - name: SAM Build
        run: sam build --config-file ${{ env.SAM_CONFIG_FILE }}
    
      - name: SAM Deploy to AWS Lambda
        run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --config-file ${{ env.SAM_CONFIG_FILE }}

  system-test:
    name: System Testing
    needs: deploy-to-aws-lambda
    runs-on: ubuntu-latest
    steps:
      - name: Check out respository
        uses: actions/checkout@v3
      
      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_CI_CD_test.txt
      
      - name: Run pytest on main lambda function
        if: github.ref == 'refs/heads/main'
        run: pytest ./tests/system -k _main -n auto

      - name: Run pytest on development lambda function
        if: github.ref == 'refs/heads/dev'
        run: pytest ./tests/system -k _dev -n auto
