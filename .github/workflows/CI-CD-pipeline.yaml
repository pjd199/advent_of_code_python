name: CI-CD-Pipeline

on:
  push:
    branches:
      - main

concurrency: 
  group: CICD${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Static Check
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 16
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Check out Respository
        uses: actions/checkout@v3
      
      - name: Setup up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 flake8-black flake8-isort flake8-bugbear flake8-deprecated
          pip install mypy
          pip install bandit

      - name: Lint with flake8
        run: |
          flake8 . --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Static type check with mypy
        run: |
          mypy .

      - name: Security check with bandit
        run: |
          bandit -r advent_of_code

  test:
    name: Unit & Integration Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: [1, 2, 3, 4, 5, 6, 7, 8]
    steps:
      - name: Check out respository
        uses: actions/checkout@v3
      
      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      
      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-split pytest-cov pytest-xdist pytest-custom_exit_code
      
      - name: Run pytest
        run: pytest --cov --splits 8 --group ${{ matrix.group }} -n auto --suppress-no-test-exit-code --splitting-algorithm=least_duration
      
      - name: Uploading coverage file artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

  coverage:
    name: Coverage Check
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out respository
        uses: actions/checkout@v3
      
      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
     
      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
      
      - name: Download all artifacts
        # Downloads coverage1, coverage2, etc.
        uses: actions/download-artifact@v2
      
      - name: Combine coverage files
        run: coverage combine coverage*/.coverage*

      - name: Generate XML report
        run: coverage xml

      - name: Send coverage report to Codecov
        uses: codecov/codecov-action@v1
        # with:
        #     # token: ${{ secrets.CODECOV_TOKEN }}
        #    file: coverage.xml
            
      - name: Check for 100% coverage
        run: coverage report --fail-under=100

  deploy-to-aws-lambda:
    name: Deploy to AWS Lambda
    needs: [check, test, coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Check out respository
        uses: actions/checkout@v3
      
      - name: Setup up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools
          pip install -r requirements.txt
     
      - name: Setup AWS SAM
        uses: aws-actions/setup-sam@v1
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
       
      - name: SAM build
        run: sam build
      
      - name: SAM deploy
        run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name advent-of-code-python --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-1wh6zbny2z2lr --capabilities CAPABILITY_IAM --region eu-west-2

  system-test:
    name: System Testing
    needs: deploy-to-aws-lambda
    runs-on: ubuntu-latest
    steps:
      - name: Run endpoint tests
        run: |
          echo Invoking function on AWS Lambda: https://jnrxshzkvnbexzeedxptq54ugq0mqlpe.lambda-url.eu-west-2.on.aws
          echo Invoking function with /
          curl --silent --include --show-error --fail https://jnrxshzkvnbexzeedxptq54ugq0mqlpe.lambda-url.eu-west-2.on.aws
          echo
          echo Invoking function with /2015
          curl --silent --include --show-error --fail https://jnrxshzkvnbexzeedxptq54ugq0mqlpe.lambda-url.eu-west-2.on.aws/2015
          echo
          echo Invoking function with /2015/1
          curl --silent --include --show-error --fail https://jnrxshzkvnbexzeedxptq54ugq0mqlpe.lambda-url.eu-west-2.on.aws/2015/1
          echo
          echo Invoking function with /2015/2/part_one
          curl --silent --include --show-error --fail https://jnrxshzkvnbexzeedxptq54ugq0mqlpe.lambda-url.eu-west-2.on.aws/2015/2/part_one
          echo
          echo Invoking function with /2015/3/part_two
          curl --silent --include --show-error --fail https://jnrxshzkvnbexzeedxptq54ugq0mqlpe.lambda-url.eu-west-2.on.aws/2015/3/part_two
          echo
          echo
