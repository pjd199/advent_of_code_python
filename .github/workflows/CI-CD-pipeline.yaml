name: CI-CD-Pipeline

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - dev

  pull_request:
    types: [opened, edited, reopened]

# concurrency: 
#   group: CICD${{ github.ref }}
#   cancel-in-progress: true

jobs:
  # check:
  #   name: Static Check
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Check out Respository
  #       uses: actions/checkout@v3
      
  #     - name: Setup up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"
  #         cache: "pip"
      
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements_CI_CD_check.txt

  #     - name: Lint with flake8
  #       run: |
  #         flake8 . --select=E9,F63,F7,F82 --show-source --statistics
  #         flake8 . --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  #     - name: Static type check with mypy
  #       run: |
  #         mypy --strict .

  #     - name: Security check with bandit
  #       run: |
  #         bandit -r advent_of_code

  # unit-test:
  #   name: Unit & Integration Test
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       group: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  #   steps:
  #     - name: Check out respository
  #       uses: actions/checkout@v3
      
  #     - name: Setup up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"
  #         cache: "pip"
      
  #     - name: Install dependancies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements_CI_CD_test.txt
      
  #     - name: Run pytest
  #       run: pytest ./tests/unit ./tests/integration --cov --splits 10 --group ${{ matrix.group }} -n auto --suppress-no-test-exit-code --splitting-algorithm=least_duration
      
  #     - name: Uploading coverage file artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: coverage${{ matrix.group }}
  #         path: .coverage

  # coverage:
  #   name: Coverage Check
  #   needs: unit-test 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out respository
  #       uses: actions/checkout@v3
      
  #     - name: Setup up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"
  #         cache: "pip"
     
  #     - name: Install dependancies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install coverage
      
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v3
      
  #     - name: Combine coverage files
  #       run: coverage combine coverage*/.coverage*

  #     - name: Generate XML report
  #       run: coverage xml --omit="*/test*"

  #     - name: Send coverage report to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
            
  #     - name: Check for 100% coverage
  #       run: coverage report --fail-under=100 --omit="*/test*"

  build_wheels:
    name: Build project wheels for PyPy on amd64
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Respository
        uses: actions/checkout@v3
  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Use Docker to build wheels
        run: docker buildx build -f Dockerfile_wheels --tag wheely . 

      - name: List containers
        run: |
          docker images 
          docker container ls --all > file.txt

      - name: Copy files from Docker image
        run: |
          mkdir -p wheelhouse
          docker run wheely
          docker cp wheely:/var/wheels wheelhouse
          docker kill wheely

      - uses: actions/upload-artifact@v3
        with:
          #path: wheelhouse/*.whl
          path: file.txt

      # - name: Commit updated wheels to repository
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     commit_message: Updated status graphic
      #     branch: dev
      #     file_pattern: 'wheelhouse/*.whl'


  # deploy-to-aws-lambda:
  #   name: Deploy to AWS Lambda
  #   # needs: coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #     -  name: Check out respository
  #        uses: actions/checkout@v3

  #     - name: Set variables for Production
  #       if: github.ref == 'refs/heads/main'
  #       run: echo "SAM_CONFIG_FILE=samconfig.toml" >> $GITHUB_ENV
      
  #     - name: Set variables for Development
  #       if: github.ref == 'refs/heads/dev' || github.head_ref == 'dev'
  #       run: echo "SAM_CONFIG_FILE=samconfig_dev.toml" >> $GITHUB_ENV

  #     - name: Setup AWS SAM
  #       uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2
      
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
      
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Docker test build
  #       run: docker buildx build .

  #     - name: SAM Validate
  #       run: sam validate --lint

  #     - name: SAM Build
  #       run: sam build --config-file ${{ env.SAM_CONFIG_FILE }}
    
  #     - name: SAM Deploy to AWS Lambda
  #       run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --config-file ${{ env.SAM_CONFIG_FILE }}

  # system-test:
  #   name: System Testing
  #   needs: deploy-to-aws-lambda
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out respository
  #       uses: actions/checkout@v3
      
  #     - name: Setup up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"
  #         cache: "pip"

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: Install dependancies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements_CI_CD_test.txt
      
  #     - name: Run pytest on main lambda function
  #       if: github.ref == 'refs/heads/main'
  #       run: pytest ./tests/system -k _main -n auto

  #     - name: Run pytest on development lambda function
  #       if: github.ref == 'refs/heads/dev' || github.head_ref == 'dev'
  #       run: pytest ./tests/system -k _dev -n auto

  # update_status_graphic:
  #   name: Update Status Graphic
  #   needs: system-test
  #   uses: ./.github/workflows/update_status_graphic.yaml

  # dump:
  #   name: Dump Environment Variables
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Dump context
  #       uses: crazy-max/ghaction-dump-context@v1
