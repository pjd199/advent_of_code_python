"""Solves the puzzle for Day {day} of Advent of Code {year}.

# {title}

https://adventofcode.com/{year}/day/{day}

## Part One

{part_one}

## Part Two

{part_two}
"""
from pathlib import Path
from re import compile
from sys import path
from typing import List

if __name__ == "__main__":  # pragma: no cover
    path.append(str(Path(__file__).parent.parent.parent))

from advent_of_code.utils.runner import runner
from advent_of_code.utils.solver_interface import SolverInterface


class Solver(SolverInterface):
    """Solves the puzzle."""

    YEAR = {year}
    DAY = {day}
    TITLE = "{title}"

    def __init__(self, puzzle_input: List[str]) -> None:
        """Initialise the puzzle and parse the input.

        Args:
            puzzle_input (List[str]): The lines of the input file

        Raises:
            RuntimeError: Raised if the input cannot be parsed
        """
        # validate and parse the input
        if (
            puzzle_input is None
            or len(puzzle_input) == 0
            or len(puzzle_input[0].strip()) == 0
        ):
            raise RuntimeError("Puzzle input is empty")

        # parse the input
        self.input = []
        pattern = compile(r"")
        for i, line in enumerate(puzzle_input):
            if m := pattern.fullmatch(line):
                self.input.append(m[0])
            else:
                raise RuntimeError(f"Unable to parse {{line}} on line {{i+1}}")

    def solve_part_one(self) -> int:
        """Solve part one of the puzzle.

        Returns:
            int: the answer
        """
        return -1

    def solve_part_two(self) -> int:
        """Solve part two of the puzzle.

        Returns:
            int: the answer
        """
        return -1


if __name__ == "__main__":  # pragma: no cover
    runner(Solver)
